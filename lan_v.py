# -*- coding: cp1252 -*-
# -*- coding: utf-8 -*-

# hafa if eitthva√∞ ef √æa√∞ er √Ωtt 2x √° reikna


#global breyta sem heldur utan l√°nt√∂kukostna√∞inn (ver√∞b√≥lga, vextir, uppgrei√∞slugjald..)
kostnadur = 0
#global breyta sem heldur utan um n√∂fn l√°na og raunvexti √æeirra
lan = []

#skilar double t√∂lu sem er heildarl√°nt√∂kukostna√∞ur, √æ.e. summa - H (heildarkostna√∞ur - h√∂fu√∞st√≥ll)
def fa_lanakostnad():
	global kostnadur
	return kostnadur

#skilar fylki me√∞ tveimur st√∂kum, nafn l√°nsins me√∞ h√¶stu raunvexti og raunvexturinn sj√°lfur
def raunvLan():
	max = []
	for i in range(0, len(lan)):
		if(lan[i][1] > max)
			max[0] = lan[i][0]
			max[1] = lan [i][1]
	return max

	
def lan(H, v, gb, n, verdtrygging, jafnar, verdbolga, umfram, einman. nafnLan):
	global lan
	
	if(verdbolga == 0): 		#ver√∞b√≥lga n√∫na
		vb = 3.1
	elif(verdbolga == 5): 		#ver√∞b√≥lga 5 √°r
		vb = 6.07868852459016
	elif(verdbolga == 10): 		#ver√∞b√≥lga 10 √°r
		vb = 6.19421487603305
	elif(verdbolga == 15):		#ver√∞b√≥lga 15 √°r
		vb = 5.60276243093922
	else:
		vb = 0.0
	
	lan.append([nafnLan, (v+vb)/100])
	
	if(einman == 0):									#umframgrei√∞slan er eingrei√∞sla
		if(jafnar == 1):
			if(verdtrygging == 0):
				overdAfborganirEin(H, n, v, umfram)			#afborganir, √≥ver√∞tryggt
			else:
				verdAfborganirEin(H, n, v, vb, umfram)		#afborganir, ver√∞tryggt
		else:
			if(verdtrygging == 0):
				overdGreidslurEin(H, n, v, umfram)			#grei√∞slur, √≥ver√∞tryggt
			else:
				verdGreidslurEin(H, n, v, vb, umfram)		#grei√∞slur, ver√∞tryggt
	else:												#umframgrei√∞slan er m√°na√∞arlega
		if(jafnar == 1):	#jafnar afborganir
			if(verdtrygging == 0):
				overdAfborganirMan(H, n, v, umfram)			#afborganir, √≥ver√∞tryggt
			else:
				verdAfborganirMan(H, n, v, vb, umfram)		#afborganir, ver√∞tryggt
		else:		#jafnar grei√∞slur
			if(verdtrygging == 0):
				overdGreidslurMan(H, n, v, umfram)			#grei√∞slur, √≥ver√∞tryggt
			else:
				verdGreidslurMan(H, n, v, vb, umfram)		#grei√∞slur, ver√∞tryggt
				
# Notkun: 	bestu_lanavextir():
# Fyrir: 	Notandi hefur slegi√∞ inn uppl√Ωsingar um l√°nin s√≠n og √æ√¶r 
# 		uppl√Ωsingar eru a√∞ finna √≠ <fylki>
# Eftir:	bestu_lanavextir er h√¶stu vextir l≈Ña sem notandi er me√∞.
#def bestu_lanavextir():
"""	Hvar geymir J√≥hanna t√∂frauppl√Ωsingar um l√°nin?? :D
	V√¶ri gott a√∞ vera me√∞ svipa√∞ uppl√Ωsingaform og fyrir sparna√∞inn... (gogn.py)
"""


# √ìver√∞tryggt, jafnar afborganir, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me einni umframgreislu
# Notkun: overdAfborganirEin(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), umframgrei√∞sla)
def overdAfborganirEin(H, n, v, umfram):
	global kostnadur
	def temp(H, n, v, umfram):
		v = float(v)/100
		nt = n*12
		vt = float(v)/12
		if(nt == 0):
			afb = 0
		else:
			afb = float(H)/nt
		eftirs = H
		summa = 0
		stodur = [eftirs]
		x = []
		skil = []
		#Fyrsti m√°nu√∞urinn:
		greidsla = afb + vt*eftirs + umfram
		eftirs = eftirs - afb - 0.99*umfram
		summa = summa + greidsla
		stodur.append(round(eftirs))
		while(round(eftirs) > afb):
			greidsla = afb + vt*eftirs
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#S√≠√∞asti m√°nu√∞urinn:
		afb = eftirs
		greidsla = afb + vt*eftirs
		eftirs = eftirs - afb
		summa = summa + greidsla
		stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil
	if(n == 0):
		print [[][]]
		return [[][]]
	else:
		if(H > 0.99*umfram+H/(n*12)):
			temp(H, n, v, umfram)
		else:
			temp(H, n, v, 0)

# Ver√∞tryggt, jafnar afborganir, ver√∞b√≥lga alltaf s√∫ sama, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me√∞ einni umframgrei√∞slu
# Noktun: verdAfborganirEin(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), ver√∞b√≥lga(%), umframgrei√∞sla)
def verdAfborganirEin(H, n, v, vb, umfram):
	global kostnadur
	def temp(H, n, v, vb, umfram):
		import math
		v = float(v)/100
		vb = float(vb)/100
		nt = n*12
		vt = float(v)/12
		vbt = float(vb)/12
		if(n == 0):
			afb = 0
		else:
			afb = float(H)/nt
		eftirs = H
		summa = 0
		stodur = [eftirs]
		x = []
		skil = []
		#Fyrsti m√°nu√∞urinn:
		greidsla = afb + (vt+vbt)*eftirs + umfram
		eftirs = eftirs - afb - 0.99*umfram
		summa = summa + greidsla
		stodur.append(round(eftirs))
		while(round(eftirs) > afb):
			greidsla = afb + (vt+vbt)*eftirs
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#S√≠√∞asti m√°nu√∞urinn:
		afb = eftirs
		greidsla = afb + (vt+vbt)*eftirs
		eftirs = eftirs - afb
		summa = summa + greidsla
		stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil
	if(n == 0):
		print [[][]]
		return [[][]]
	else:
		if(H > 0.99*umfram+H/(n*12)):
			temp(H, n, v, vb, umfram)
		else:
			temp(H, n, v, vb, 0)


# √ìver√∞tryggt, jafnar grei√∞slur, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me√∞ einni umframgrei√∞slu
# Notkun: overdGreidslurEin(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), umframgrei√∞sla)
def overdGreidslurEin(H, n, v, umfram):
	global kostnadur
	v = float(v)/100
	nt = n*12
	vt = float(v)/12
	def temp(H, n, v, umfram):
		greidsla = A
		eftirs = H
		summa = 0
		stodur = [eftirs]
		x = []
		skil = []
		#Fyrsti m√°nu√∞urinn:
		vextir = v*eftirs
		afb = greidsla - vextir + 0.99*umfram
		eftirs = eftirs - afb
		summa = summa + greidsla + umfram
		stodur.append(round(eftirs))
		while(round(eftirs) > greidsla - vextir):
			vextir = v*eftirs
			afb = greidsla - vextir
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#S√≠√∞asti m√°nu√∞urinn:
		afb = eftirs
		greidsla = afb + v*eftirs
		eftirs = eftirs - afb
		summa = summa + greidsla
		stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil
	if(n == 0):
		print [[][]]
		return [[][]]
	elif(vt == 0):
		overdAfborganirEin(H, nt, 0, umfram)
	else:
		A = H*((vt*(1+vt)**nt)/(((1+vt)**nt)-1))
		if(H > A-v*H+0.99*umfram):
			temp(H, nt, vt, umfram)
		else:
			temp(H, nt, vt, 0)


# Ver√∞tryggt, jafnar grei√∞slur, ver√∞b√≥lga alltaf s√∫ sama, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me√∞ einni umframgrei√∞slu
# Notkun: verdGreidslurEin(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), ver√∞b√≥lga(%), umfram)	
def verdGreidslurEin(H, n, v, vb, umfram):
	global kostnadur
	import math
	v = float(v)/100
	vb = float(vb)/100
	nt = n*12
	vt = float(v)/12
	vbt = float(vb)/12
	def temp(H, n, v, vb, umfram):
		eftirs = H
		greidsla = A
		summa = 0
		stodur = [eftirs]
		x = []
		skil = []
		#Fyrsti m√°nu√∞urinn:
		eftirs = eftirs + vb*eftirs
		greidsla = (1+vb)*greidsla
		afb = greidsla - v*eftirs + 0.99*umfram
		eftirs = eftirs - afb
		summa = summa + greidsla + umfram
		stodur.append(round(eftirs))
		while(round(eftirs) > greidsla - v*eftirs):
			eftirs = eftirs + vb*eftirs
			greidsla = (1+vb)*greidsla
			afb = greidsla - v*eftirs
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#S√≠√∞asti m√°nu√∞urinn:
		afb = eftirs
		greidsla = afb + v*eftirs
		eftirs = eftirs - afb
		summa = summa + greidsla
		stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil
	if(n == 0):
		print [[][]]
		return [[][]]
	elif(vbt == 0):
		overdGreidslurEin(H, nt, vt, umfram)
	elif(v == 0):
		verdAfborganirEin(H, nt, 0, vbt, umfram)
	else:
		A = H*((vt*(1+vt)**nt)/(((1+vt)**nt)-1))
		if((1+vb)*H > (1+vb)*A-v*H+0.99*umfram):
			temp(H, nt, vt, vbt, umfram)
		else:
			temp(H, nt, vt, vbt, 0)


# √ìver√∞tryggt, jafnar afborganir, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me√∞ m√°na√∞arlegri umframgrei√∞slu
# Notkun: overdAfborganirMan(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), umframgrei√∞sla)
def overdAfborganirMan(H, n, v, umfram):
	global kostnadur
	v = float(v)/100
	nt = n*12
	vt = float(v)/12
	if(nt == 0):
		print [[][]]
		return [[][]]
	else:
		afb = float(H)/nt
		eftirs = H
		summa = 0
		stodur = [eftirs]
		x = []
		skil = []
		#keyrum √æetta √° me√∞an summa afborgunar og umframgrei√∞slu er minni en eftirsta√∞an (svo eftirsta√∞an fer ekki √≠ m√≠nust√∂lu)
		while(round(eftirs) > afb+0.99*umfram):
			greidsla = afb + vt*eftirs + umfram
			eftirs = eftirs - afb - 0.99*umfram		#0.99 √∫taf 1% fer √≠ uppgrei√∞slukosnta√∞ur
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgnunin er meiri en eftirsta√∞an ver√∞ur engin umframgrei√∞sla
		if(afb > eftirs):
			afb = eftirs
			greidsla = afb + vt*eftirs
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgunin er minni, √æ√° √æurfum vi√∞ fyrst a√∞ reikna hver umframgrei√∞slan √æarf a√∞ vera
		else:
			umfram = (eftirs - afb)/0.99
			greidsla = afb + vt*eftirs + umfram
			eftirs = eftirs - afb - 0.99*umfram		# == eftirs - afb - (eftirs - afb) = 0
			summa = summa + greidsla
			stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil


# Ver√∞tryggt, jafnar afborganir, ver√∞b√≥lga alltaf s√∫ sama, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me√∞ m√°na√∞arlegri umframgrei√∞slu
# Noktun: verdAfborganirMan(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), ver√∞b√≥lga(%), umframgrei√∞sla)
def verdAfborganirMan(H, n, v, vb, umfram):
	global kostnadur
	import math
	v = float(v)/100
	vb = float(vb)/100
	nt = n*12
	vt = float(v)/12
	vbt = float(vb)/12
	if(n == 0):
		print []
		return []
	else:
		afb = float(H)/nt
		eftirs = H
		summa = 0
		stodur = [eftirs]
		x = []
		skil = []
		#keyrum √æetta √° me√∞an summa afborgunar og umframgrei√∞slu er minni en eftirsta√∞an (svo eftirsta√∞an fer ekki √≠ m√≠nust√∂lu)
		while(round(eftirs) > afb+0.99*umfram):
			greidsla = afb + (vt+vbt)*eftirs + umfram
			eftirs = eftirs - afb - 0.99*umfram		#0.99 √∫taf 1% fer √≠ uppgrei√∞slukosnta√∞ur
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgnunin er meiri en eftirsta√∞an ver√∞ur engin umframgrei√∞sla
		if(afb > eftirs):
			afb = eftirs
			greidsla = afb + (vt+vbt)*eftirs
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgunin er minni, √æ√° √æurfum vi√∞ fyrst a√∞ reikna hver umframgrei√∞slan √æarf a√∞ vera
		else:
			umfram = (eftirs - afb)/0.99
			greidsla = afb + (vt+vbt)*eftirs + umfram
			eftirs = eftirs - afb - 0.99*umfram
			summa = summa + greidsla
			stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil


# √ìver√∞tryggt, jafnar grei√∞slur, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me√∞ m√°na√∞arlegri umframgrei√∞slu
# Notkun: overdGreidslurMan(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), umframgrei√∞sla)
def overdGreidslurMan(H, n, v, umfram):
	global kostnadur
	v = float(v)/100
	nt = n*12
	vt = float(v)/12
	def temp(H, n, v, umfram):
		greidsla = A
		eftirs = H
		summa = 0
		stodur = [eftirs]
		x = [[][]]
		skil = [[][]]
		#keyrum √æetta √° me√∞an afborgunin = greidsla-v*eftirs+0.99*umfram er minni en eftirsta√∞an
		while(round(eftirs) > greidsla-v*eftirs+0.99*umfram):
			afb = greidsla - v*eftirs + 0.99*umfram		#√æar sem v*eftirs = vextir #0.99 √∫taf 1% fer √≠ uppgrei√∞slukosnta√∞ur
			eftirs = eftirs - afb
			summa = summa + greidsla + umfram
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgnunin = greidsla-v*eftirs er meiri en eftirsta√∞an ver√∞ur engin umframgrei√∞sla
		if(greidsla-v*eftirs > eftirs):
			afb = eftirs
			greidsla = afb + v*eftirs
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgunin er minni, √æ√° √æurfum vi√∞ fyrst a√∞ reikna hver umframgrei√∞slan √æarf a√∞ vera
		else:
			umfram = (eftirs - (greidsla - v*eftirs))/0.99		#√æar sem greidsla-v*eftirs er afborgunin (√°n umframgrei√∞slu)
			afb = greidsla - v*eftirs + 0.99*umfram
			eftirs = eftirs - afb
			summa = summa + greidsla + umfram
			stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil
	#√°√∞ur en vi√∞ f√∂rum √≠ temp √æarf a√∞ ath hvort n=0 e√∞a v=0 svo vi√∞ s√©um ekki a√∞ deila me√∞ 0 og f√° keyrsluvillu
	if(n == 0):
		print [[][]]
		return [[][]]
	elif(v == 0):
			overdAfborganirMan(H, n, 0, umfram)
	else:
		A = H*((vt*(1+vt)**nt)/(((1+vt)**nt)-1))
		if(H > A-v*H+0.99*umfram):
			temp(H, nt, vt, umfram)
		else:
			temp(H, nt, vt, 0)


# Ver√∞tryggt, jafnar grei√∞slur, ver√∞b√≥lga alltaf s√∫ sama, reikna√∞ m√°na√∞arlega, me√∞ m√∂guleika √° umframgrei√∞slur (uppgrei√∞slugjald er 1%), me√∞ m√°na√∞arlegri umframgrei√∞slu
# Notkun: verdGreidslurMan(h√∂fu√∞st√≥ll, fj√∂ldi √°ra, vextir(%), ver√∞b√≥lga(%), umfram)	
def verdGreidslurMan(H, n, v, vb, umfram):
	global kostnadur
	import math
	v = float(v)/100
	vb = float(vb)/100
	nt = n*12
	vt = float(v)/12
	vbt = float(vb)/12
	def temp(H, n, v, vb, umfram):
		eftirs = H
		greidsla = A
		summa = 0
		stodur = [eftirs]
		x = [[][]]
		skil = [[][]]
		#keyrum √æetta √° me√∞an afborgunin = greidsla-v*eftirs+0.99*umfram er minni en eftirsta√∞an(me√∞ vi√∞b√¶ttri ver√∞b√≥lgu)
		while(round((1+vb)*eftirs) > (1+vb)*greidsla-v*eftirs+0.99*umfram): 	
			eftirs = (1+vb)*eftirs
			greidsla = (1+vb)*greidsla
			afb = greidsla - v*eftirs + 0.99*umfram		#√æar sem v*eftirs = vextir #0.99 √∫taf 1% fer √≠ uppgrei√∞slukosnta√∞ur
			eftirs = eftirs - afb
			summa = summa + greidsla + umfram
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgnunin = greidsla-v*eftirs er meiri en eftirsta√∞an (me√∞ ver√∞b√≥lgu) ver√∞ur engin umframgrei√∞sla
		if(greidsla-v*eftirs > (1+vb)*eftirs):
			eftirs = (1+vb)*eftirs
			afb = eftirs
			greidsla = (1+vb)*(afb + v*eftirs)
			eftirs = eftirs - afb
			summa = summa + greidsla
			stodur.append(round(eftirs))
		#s√≠√∞asti m√°nu√∞urinn: ef afborgunin er minni, √æ√° √æurfum vi√∞ fyrst a√∞ reikna hver umframgrei√∞slan √æarf a√∞ vera
		else:
			eftirs = (1+vb)*eftirs
			greidsla = (1+vb)*greidsla
			umfram = (eftirs - (greidsla - v*eftirs))/0.99		#√æar sem greidsla-v*eftirs er afborgunin (√°n umframgrei√∞slu)
			afb = greidsla - v*eftirs + 0.99*umfram
			eftirs = eftirs - afb
			summa = summa + greidsla + umfram
			stodur.append(round(eftirs))
		kostnadur = summa - H
		for i in range(0, len(stodur)):
			x.append(i)
		skil.append(x)
		skil.append(stodur)
		print skil
		return skil
	#√°√∞ur en vi√∞ f√∂rum √≠ temp √æarf a√∞ ath hvort n=0 e√∞a v=0 svo vi√∞ s√©um ekki a√∞ deila me√∞ 0 og f√° keyrsluvillu
	if(n == 0):
		print [[][]]
		return [[][]]
	elif(vb == 0):
			overdGreidslurMan(H, n, v, umfram)
	elif(v == 0): 
		verdAfborganirMan(H, n, 0, vb, umfram)
	else:
		A = H*((vt*(1+vt)**nt)/(((1+vt)**nt)-1))
		if((1+vb)*H > (1+vb)*A-v*H+0.99*umfram):
			temp(H, nt, vt, vbt, umfram)
		else:
			temp(H, nt, vt, vbt, 0)
